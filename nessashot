#!/usr/bin/js
/* nessashot
 * Commandline interface for Pokemon UNITE search and grapher
 * Copyright (C) 2021-2022 Jaret Jay Cantu
 * Licensed under the AGPL
 */
load("nessashot.js");
load("pokemon.js");
load("emblems.js");
load("search.js");

function showHelp() {
	print("nessashot {-h|--help}                     - Show this message");
	print("nessashot [-s|--show stats,dps,tankiness]          \\");
	print("          [-l|--levels {#,#...|#-#}]               \\");
	print("          [-m|--move 1|2|Name]                     \\");
	print("          [-e|--emblem {color=#|stat=#}]           \\");
	print("          [-i|--item Name(=Level)]                 \\");
	print("          [--itemlevel Name=Level]                 \\");
	print("          [--itemdefault Level]                    \\");
	print("          [--specperc %%]                          \\");
	print("          [-c|--crit (min|avg|max)]                \\");
	print("          [-o|--optimize items|itemlevels|emblems] \\");
	print("          [-O|--sort show]                         \\");
	print("          [-S|--score min,max|score]       \\");
	print("          Pokemon                         - Show Pokemon chart");
}

function parseArgs(args) {
	var opts = { h: "help", c: "crit", e: "emblem", i: "item", l: "levels",
		     m: "move", o: "optimize", O: "sort", s: "show",
		     S: "score" };
	var parsed = {
			levels: [],
			moves: [],
			emblems: [],
			items: [],
			itemlevels: {},
			itemdefault: 30,
			crit: ['avg'],
			scores: null,
			show: [],
			sort: [],
			specialperc: 0.4,
		};

	for (var a=0; a<args.length; a++) {
		var arg = args[a];
		if (arg.charAt(0) != '-') {
			if (isDefined(parsed.pokemon)) {
				// XXX Might specify an enemy, too
				throw("Unexpected argument: " + arg);
			}
			if (!isDefined(Pokemon.LIST[arg]))
				throw("Unknown Pokemon: " + arg);
			parsed.pokemon = arg;
			continue;
		}
		// Only switches will be processed from here on out

		// Check if it is a name/value pair
		var eq = arg.indexOf('=');
		if (eq > 0) {
			// Insert value into argument list
			args[a--] = arg.substring(1+eq);
			arg = arg.substring(0, eq);
		}

		// Need to separate pairs before processing hyphens
		var nc = arg.charAt(1);
		if (arg.length == 2) {
			// Must be hyphen-char combination
			if (!isDefined(opts[nc]))
				throw("Unknown option: " + arg);
			arg = opts[nc];
		} else if (nc == '-') {
			// Two hyphens followed by full option name
			arg = arg.substring(2);
		} else {
			throw("Unknown option: " + arg);
		}

		// Special case; will only be processed on the cmdline
		if (arg == 'help') {
			showHelp();
			quit();
		}

		a+= parseOption(parsed, arg, args, a);
	}

	return parsed;
}

if (scriptArgs.length == 0) {
	showHelp();
} else {
	var tables = createTables(parseArgs(scriptArgs));
	var common = getCommonLabels(tables);

	for (var t=0; t<tables.length; t++) {
		var tbl = tables[t];
		for (var e in tbl[1]) {
			var str = removeCommonLabels(tbl[0], common).join(' ') +
				  "@" + e + ": ";
			for (var l=1; l<tbl.length; l++) {
				if (l>1) {
					str+= ',';
					// The last entry may be numeric fitness
					if (l == tbl.length-1 &&
					    !(tbl[l] instanceof Object)) {
						str+= tbl[l];
						break;
					}
				}
				str+= tbl[l][e];
			}
			print(str);
		}
	}
}
